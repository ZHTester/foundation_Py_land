# coding=utf-8

"""
del 语句和垃圾回收

1 垃圾回收机制实际上是采用的是引用计数的方式进行的
2 实际上就是 a = 1 变量a 指向了1 然后b=a 那么b变量其实也是指向了1 那么1上就有2个变量，也就是引用计数
  然后我们使用了del a 那么引用计数就会减1 引用计数器减到0的时候，python的垃圾回收机制就会将这个变量回收
----
Python默认的垃圾收集机制是“引用计数”，每个对象维护了一个ob_ref字段。它的优点是机制简单，当新的引用指向该对象时，
引用计数加1，当一个对象的引用被销毁时减1，一旦对象的引用计数为0，该对象立即被回收，所占用的内存将被释放。它的缺
点是需要额外的空间维护引用计数，不过最主要的问题是它不能解决“循环引用”。

"""
a = 1
b = a  # 实际上在b变量的引用计数器上就只含有了一个对象的引用
del a
print(b)
# print(a)  # 这个变量已经被del删除了 同时向引用计数器减1 这个时候没有了引用计数器的时候，这个时候就会报错啦

"""
1 当我们在引用这个del的时候，我们就自动回去调用这个del
2 当我们在回收某些资源的时候，我们就可以回收某些变量对象 就可以调用__del__
3 当python解释其来回收我们某些变量(对象)的时候，他就可以执行我们魔法函数中的机制 也就是重构__del__莫法函数 
4  
"""


class A:
    def __del__(self):
        pass
