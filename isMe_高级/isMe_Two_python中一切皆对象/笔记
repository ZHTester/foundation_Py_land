*1* python中一切皆对象：

1 在python中所有的都是对象，一切皆对象，实际上python的面向对象是比python中的面向对象更加的彻底，python中一切皆对象
  这样的一个理论，几乎就是python灵活的根本。
2 object只是class的一个实例，也就是说在java中class中也是一个对象，但是了在欧阳天虹中，函数和类，包括代码可模块其实他也
  是对象也是对象，但是这在java中
  或者是其他的静态语言中他们并不是对象，所以说这些点就说明python中这些一切皆对象的概念，才能体现python的动态性
3 类本身就是可以实例化一个对象，那么他本身都是对象如何去实例化一个对象了，类既然是对象那么我们就可以动态的去修改他的一些属性
4 还有就是python函数和类也是一个对象，其中他就是可以1赋值给一个变量2可以天安家到集合对象中3可以作为参数传递个函数4
  可以当做函数的返回值。
----------------------------------------------------------------------
*2*type object class 关系 - 通过这样的关系来理解python中的一切皆对象

type object class 关系  - 理解python一切皆对象的关系
1  type 是有两种用法的 第一就是生成一个类 第二就是返回我们所想返回的数据类型
2  type是用来生成我们的类对象的
3  我们的类是由type这个类来生成的对象，我们平时所熟悉的对象他是由我们的类对象来创建的一个对象，type是用来生成类的
4  obj所有的类都需要继承的基础类
5  obj是最顶层的基类 所有的类推到最顶层的类都是obj类
6  type本身也是一个类，同时type也是一个对象
7  type-obj-type 也是个闭环的关系 互相生成互相 type继承了object 但是了object是type的实例，
   也就是type生成了obejct这个实例
8  type是创建了所有的对象 object = type()
9  list 是一个类也是一个对象因为他是被type创建出来的 这就是我们python一切对象的一个理念
10 类一旦创建，我们在吧这个类加载到内存中，实际上这个类是不能再被修改的，但是在python中我们把类变成对象这样的问题就
   可以很好的解决了因为对象我们可以随时修改
11 type也是自身的一个实例 但是type继承了object 这样就做到了一切皆对象的概念同时继承了object
12 相当于就是自己都是自己的对象，那么也即是一切皆对象了，所以其他成为type的对象，那么自己能把自己变为自己的对象，
   那么也就是python中所说的一切皆对象 一切都继承了object
13 我们需要深入的去理解一下python中一切皆对象是如何去做到的

----------------------------------------------------------------------
*3* python中常见的内置类型
python之所以将所有的类型都变为对象，这就是python之所以为啥灵活
1 对象有三个特征 - 对象是存储在内存中的
  1 身份 对象在内存中地址
  2 类型
  3 值
2 None(全局只有一个) *** python解释器会生成一个None，id(a) = id(b) 也就是在全局变量中只会含有一个
3 数值 ** (int  float complex(复数类型) bool)
4 迭代类型 **迭代类型可以用for循环进行迭代循环
5 序列类型 ** list bytes(bytes,bytearry,memory(二进制序列)) range tuple str array
6 映射类型(dict) ** key value
7 集合(set(可变的数据类型) && frozenset(不可变的数据类型))
8 上下文管理(with语句)
9 其他 ** 1 模块类型  2 class和实例  3 函数类型  4 方法类型 5 代码类型
         6 object对象 7 type类型 8 elipsis类型(省略号类型) 9 notimplemented

----------------------------------------------------------------------
*4* 总结
1 静态语言与动态语言 java && python
2 python语言的灵活性也就是导致了确实相对于静态语言中的严谨性
3 python的一切皆对象的概念就导致了，python是没有编译的过程，也就是相对于缺乏了这一层的严谨性的概念，也就是
  很多错误只有在我们代码运行起来以后才能发现的错误。 这就是动态语言带来的弊端，虽有有这些的弊端，但是他并没有
  掩盖python给我们效率带来的提高













