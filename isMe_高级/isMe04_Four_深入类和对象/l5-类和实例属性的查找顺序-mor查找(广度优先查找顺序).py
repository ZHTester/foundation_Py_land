"""
类和实例属性的查找顺序-mor查找  - 实际的查找顺序是由下而上的查找顺序
1 类属性或者说是实例属性都是定义在类或者实例中的方法或者变量通常称之为属性
2 实例的本身是有属性的
3 MRO 算法 属性查找的算法C3的算法  也就是 首先查找实例变量的中的属性，
  在去查找类变量中的属性，在去查找继承关系的变量
  属性(也就是深度优先的查找关系) ---- mor算法
4 DFS：a-b-d-c-e 深度优先的搜索算法-这个需要好好了解一下
5 广度优先的搜索算法-这个好好了解一下 python2.3以后的属性算法都是从广度优先的算法到了 深度优先的算法，也就是C3算法
 这样我们就更加的深入理解了 多继承中数据查找的关系

"""


class A:
    name = "A"  # 这个name是在A对象空间中的值

    def __init__(self):  # 初始化属性
        # 这也就是在对象中赋值这样的一个变量 self.name  然后传递给相应的值
        # 而这个self.name 是在这个a对象空间中的值
        self.name = 'obj'


a = A()
# a.name 是由下而上的一种查找顺序,也就是从实例属性中查找过后，
# 再去查找类中的熟悉，然后再出查找继承对象中的实例属性，对象属性，如果都没有的话，那么就会报错了。
# 如果这样的情况存在于多继承的情况下, 这样的情况就会显得十分的复杂了

print(a.name)


class B:
    pass


class C(B):
    pass


class D(B):
    pass


class E(D, C):
    pass

# 这样就验证了平行的一种查找顺序 继承的查询顺序 类和实例属性的查找顺序 平行查找顺序
# mro也就是查询方法查询的顺序 也就是属性查找的算法


print(E.__mro__)

# aa = 1
#
#     def __init__(self, x, y):
#         self.x = y
#         self.y = y
#
#
# a = A(4, 5)
# A.aa = 11
# a.aa = 100  # 查找的是a的属性 这样的查找顺序是由下而上的一种查找顺序
# print(a.x, a.y, a.aa)  # 实例对象来访问实例变量 查找到的顺序是一种由下而上的一种查找顺序
# print(A.aa)  # 类来访问类变量
