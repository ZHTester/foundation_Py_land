# coding=utf-8
__author__ = 'landing'
__data__ = '2019/5/11  15:52'
"""
装饰器 1 
1 软件编码的元组就是不能过多的去修改接口函数的原有形式，所以这个时候，我们就需要装饰器的一个设计模式来增加这样的方式了
2 对修改是封闭的，对扩展是开放的 
3 装饰器的本质就是给函数增加新的功能，在不破坏函数内部接口的情况下   -- 开闭原则 --
4 对于需求变更的缺点 <---> 新添加的业务逻辑，是在老的函数上 这样的问题就是装饰器应该解决的方式
5 装饰器是比较抽象的一个状态

"""
import time


def f1():
    print('this is function1')


def f2():
    print('this is function2')


def f3(fun):
    print(time.time())
    fun()


f3(f1)
print('---------------------------------------')
f3(f2)
